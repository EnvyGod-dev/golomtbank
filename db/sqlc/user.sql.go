// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "User" (
    "Username",
    "HashedPassword",
    "FirstName",
    "LastName",
    "Email"
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING "Username", "HashedPassword", "FirstName", "LastName", "Email", "PasswordChangedAt", "CreatedAt"
`

type CreateUserParams struct {
	Username       string `json:"Username"`
	HashedPassword string `json:"HashedPassword"`
	FirstName      string `json:"FirstName"`
	LastName       string `json:"LastName"`
	Email          string `json:"Email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
    "Username", "HashedPassword", "FirstName", "LastName", "Email", "PasswordChangedAt", "CreatedAt"
FROM 
    "User"
WHERE
    "Username" = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
