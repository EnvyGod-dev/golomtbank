// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: accounts.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE
    accounts
SET
    "Balance" = "Balance" + $1
WHERE
    "Id" = $2 RETURNING "Id", "Balance", "Owner", "BankName", "Currency", "CreatedAt"
`

type AddAccountBalanceParams struct {
	Amount int64 `json:"amount"`
	Id     int64 `json:"Id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.Id)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.Balance,
		&i.Owner,
		&i.BankName,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createAccounts = `-- name: CreateAccounts :one
INSERT INTO
    "accounts" (
        "Id",
        "Balance",
        "Owner",
        "BankName",
        "Currency"
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5
    ) RETURNING "Id", "Balance", "Owner", "BankName", "Currency", "CreatedAt"
`

type CreateAccountsParams struct {
	Id       int64  `json:"Id"`
	Balance  int64  `json:"Balance"`
	Owner    string `json:"Owner"`
	BankName string `json:"BankName"`
	Currency string `json:"Currency"`
}

func (q *Queries) CreateAccounts(ctx context.Context, arg CreateAccountsParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccounts,
		arg.Id,
		arg.Balance,
		arg.Owner,
		arg.BankName,
		arg.Currency,
	)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.Balance,
		&i.Owner,
		&i.BankName,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccounts = `-- name: DeleteAccounts :exec
DELETE FROM
    "accounts"
WHERE
    "Id" = $1
`

func (q *Queries) DeleteAccounts(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccounts, id)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT
    "Id", "Balance", "Owner", "BankName", "Currency", "CreatedAt"
FROM
    accounts
WHERE
    "Id" = $1
LIMIT
    1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.Balance,
		&i.Owner,
		&i.BankName,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountsForUpdate = `-- name: GetAccountsForUpdate :one
SELECT
    "Id", "Balance", "Owner", "BankName", "Currency", "CreatedAt"
FROM
    "accounts"
WHERE
    "Id" = $1
LIMIT
    1 FOR NO KEY
UPDATE
`

func (q *Queries) GetAccountsForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountsForUpdate, id)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.Balance,
		&i.Owner,
		&i.BankName,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT
    "Id", "Balance", "Owner", "BankName", "Currency", "CreatedAt"
FROM
    accounts
WHERE
    "Owner" = $3
ORDER BY
    "Id"
LIMIT
    $1
OFFSET
    $2
`

type ListAccountsParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Owner  string `json:"Owner"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset, arg.Owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.Id,
			&i.Balance,
			&i.Owner,
			&i.BankName,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccounts = `-- name: UpdateAccounts :one
UPDATE
    "accounts"
SET
    "Balance" = $1
WHERE
    "Id" = $2 RETURNING "Id", "Balance", "Owner", "BankName", "Currency", "CreatedAt"
`

type UpdateAccountsParams struct {
	Balance int64 `json:"Balance"`
	Id      int64 `json:"Id"`
}

func (q *Queries) UpdateAccounts(ctx context.Context, arg UpdateAccountsParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccounts, arg.Balance, arg.Id)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.Balance,
		&i.Owner,
		&i.BankName,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
